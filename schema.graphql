type User {
  userId: ID
  name: String
  email: String!
  active: Boolean
  rol:String
  employeeNumber: String
  area: Works
  groups: [Belongs]
  publications:[Makes]
  comments: [Writes]
  reports:[Reports]
  taggeds:[Taggeds]
  shares:[Shares]
  react:[Reactions]

}

type Area{
areaId:ID!
name: String
members: [Works]
active: Boolean
department:Indepartment
}

type Department {
  departmentId: ID!
  name: String
  active: Boolean
  areas: [Indepartment]
}

type Group {
  groupId: ID!
  name: String!
  type: String
  active: Boolean!
  members: [Belongs]
}

type Publication{
publicationId:ID
text: String
type: String
author: Makes
reactions:[Reactions]
shared:[Shares]
taggeds:Taggeds
reports:[Reports]

}

type Comment{
commentId:ID
text: String
user:Writes
reactions:[ReactionComment]
}

type Token {
  token: String
}

#----------------------RELATIONSHIP------------------------------------------

type Works @relation(name: "WORKS") {
  from: User
  to: Area
  role: String
}


type Belongs @relation(name: "BELONGS") {
  from: User
  to: Group
  role: String
}



type Makes @relation(name: "MAKES") {
 from: User
 to: Publication
 date: String
}

type Writes @relation(name: "WRITES") {
 from: User
 to: Comment
 date: String
}

type Reports @relation(name: "REPORTS"){
  from: User
  to: Publication
}

type Taggeds @relation(name: "TAGGEDS"){
  from: User
  to: Publication
}

type Tagged_to @relation(name: "TAGGED_TO"){
from: Publication
to: User
}

type Shares @relation(name: "SHARES"){
  from : User
  to: Publication
  date: String
}

type Shares_to @relation(name: "SHARED_TO"){
  from : Publication
  to: User
}

type Reactions @relation(name: "REACTIONS"){
  from: User
  to: Publication
  date:String
  type:String
  active:Boolean
}

type ReactionComment @relation(name:"REACTION_C"){
  from: User
  to: Comment
  date: String
  type:String
  active:Boolean
}

type Indepartment @relation(name: "IN_DEPARTMENT") {
  from: Area
  to: Department
  role: String
}
 


#----------------------------INPUTS------------------------------------
input AuthInput {
  email: String!
  password: String!
}

input UserInput {
  userId: ID
  name: String
  email: String!
  password: String!
  active: Boolean
  employeeNumber: String
  rol:String
}

input GroupInput {
  groupId: ID!
  name: String!
  active: Boolean!
}

input PublicationInput {
  author: ID!
  publicationId:ID
  text: String
  type: String
}

input CommentInput {
  author: ID!
  commentId:ID!
  text: String!
  publicationId: ID!
}

input TaggPublicationInput{
  ToUserId: ID!
  FromUserId: ID!
  publicationId: ID!
}

input TaggCommentInput{
  ToUserId: ID!
  FromUserId: ID!
  commentId: ID!
}


input ReactPublicationInput{
  FromUserId:ID!
  publicationId:ID!
  type:String!
}

input ReactCommentInput{
  FromUserId:ID!
  commentId:ID!
  type:String!
}

input DepartmentInput {
  departmentId: ID!
  name: String!
  active: Boolean
}



input UserEInput{
  userId:String!
  email:String!
}

input AreaInput{
  areaId:ID!
  name: String
  active: Boolean
}

input UserToAreaInput{
  areaId: ID!
  userId: ID
  name: String
  email: String!
  password: String!
  active: Boolean
  exists: Boolean
  employeeNumber: String
  rol:String
}

input publicationInGroupInput {
  author: ID!
  publicationId:ID!
  text: String
  type: String
  groupId: ID
}

type Query {
  # usuarios
  allUser(first: Int = 4, offset: Int = 0): [User]
  userByname(name: String, idUser: ID = 1000): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $name  OR u.userId CONTAINS $idUser return u"
    )
  userById(id: ID!): User
  obtenerUsuario(token: String!): User
  getUser:User
  SearchLeader(users: [ID]): [User]
 # AllNotesActiveByUser(input: UserEInput):[Note]
}

type Mutation {
  # user
  updateUser(input: UserInput): User
  newUser(input: UserInput): User
  authUser(input: AuthInput): Token
  DeleteUser(input: UserEInput):User  
  CreateUserAndAddtoArea(input:UserToAreaInput): User



  MakePublication(input: PublicationInput):Publication
  CommentPublication(input: CommentInput):Comment
  TaggInPublication(input: TaggPublicationInput):Publication
  SharePublication(input: TaggPublicationInput):Publication


  TaggInComment(input: TaggCommentInput):Comment

  
  #react
  ReactToPublication(input: ReactPublicationInput):String
  ReactToComment(input: ReactCommentInput):String


  #Group
    CreaGroupAndAddUsers(users: [ID], inputGroup: GroupInput): Group
    makePublicationInGroup(input: publicationInGroupInput): Group

}
