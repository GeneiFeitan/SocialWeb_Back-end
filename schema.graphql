type User {
  userId: ID
  name: String
  email: String!
  password: String!
  active: Boolean
  exists: Boolean
  employeeNumber: String
  department: Works
  groups: [Belongs]
}

type Group {
  groupId: ID!
  name: String!
  privacidad:Boolean!
  active: Boolean!
  members: [Belongs]
}

type Department {
  departmentId: ID!
  name: String
  active: Boolean
  members: [Works]
}

type Works @relation(name: "WORKS") {
  from: User
  to: Department
  role: String
}

type Belongs @relation(name: "BELONGS") {
  from: User
  to: Group
  role: String
}

type Token {
  token: String
}

input AuthInput {
  email: String!
  password: String!
}

input UserInput {
  userId: ID
  name: String
  email: String!
  password: String!
  active: Boolean
  exists: Boolean
  employeeNumber: String
}

input GroupInput {
  groupId: ID!
  name: String!
  active: Boolean!
}

input DepartmentInput {
  departmentId: ID!
  name: String!
  active: Boolean
}

type Query {
  allUser(first: Int = 4, offset: Int = 0): [User]
  userByname(name: String, idUser: ID = 1000): [User]
    @cypher(
      statement: "MATCH (u:User) WHERE u.name CONTAINS $name  OR u.userId CONTAINS $idUser return u"
    )
  userById(id: ID!): User
  obtenerUsuario(token: String!): User
  getUser:User
  SearchLeader(users: [ID]): [User]
}

type Mutation {
  newUser(input: UserInput): User
  mergeUserToDepartmen(userIds: ID!, departmentIds: ID!): Department
    @cypher(
      statement: "MATCH (u:User {userId:$userIds}) MATCH (d:Department {departmentId:$departmentIds}) MERGE (u)-[:WORKS]->(d) return d"
    )
  createGroupAndAddUsers(
    users: [ID]
    groupId: ID!
    name: String
    status: String
  ): [ID]
  authUser(input: AuthInput): Token
  CreateUserandAddtoDepartmen(
    departmentId: ID!
    userId: ID!
    employeeNumber: String
    name: String
    status: String
  ): User
    @cypher(
      statement: "MATCH (d:Department{departmentId:$departmentId}) MERGE (u:User{userId:$userId, name:$name,employeeNumber:$employeeNumber,status:$status}) MERGE (u)-[:WORKS]->(d) RETURN u"
    )

  CreaGroupAndAddUsers(users: [ID], inputGroup: GroupInput): Group
}
